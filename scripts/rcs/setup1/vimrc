set nocompatible
set nu
set laststatus=2
set termencoding=utf-8
filetype indent plugin on
syntax enable


"#######################
" vundles and their configs
"#######################
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'altercation/vim-colors-solarized'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'preservim/nerdcommenter' " \cc & \cu - works for visual mode
Plugin 'phpactor/phpactor' ,  {'do': 'composer install', 'for': 'php'}
Plugin '907th/vim-auto-save'
Plugin 'vim-syntastic/syntastic'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'shawncplus/phpcomplete.vim'
Plugin 'msjyoo/vim-autocomplpop-php'
Plugin 'sheerun/vim-polyglot'
Plugin 'dense-analysis/ale'
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
"coc debug
"cd ~/.vim/bundle/coc.nvim/ && git reset head --hard
"open vim && :PluginUpdate
"run call coc#util#install()

call vundle#end()

"ale
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'
"beautify
map <c-f> :call JsBeautify()<cr> "ctrl-f
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
"autosave
let g:auto_save = 1
let g:auto_save_events = ["InsertLeave", "TextChanged"]
"syntastic
set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_always_populate_loc_list = 0
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs=1
let g:syntastic_enable_highlighting=1
let g:syntastic_echo_current_error=1
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
let g:syntastic_mode_map = { 'mode': 'active',
                            \ 'active_filetypes': 
                            \ [
                            \'php',
                            \ 'python', 'javascript'
                            \],
                            \ 'passive_filetypes': [] }
let g:syntastic_javascript_checkers = ['eslint']
"rainbow brackets
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
" Tab control
set expandtab
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=2 " the visible width of tabs
set softtabstop=2 " edit as if the tabs are 4 characters wide
set shiftwidth=2 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
%retab

"#######################
"undo & backup & history
"#######################

set backup                  " enable backups
set noswapfile
set undodir=~/tmp/undo/     " undo files
set backupdir=~/tmp/backup/ " backups
set directory=~/tmp/swap/   " swap files
set history=1000
set undofile "we like the undo file"
set undolevels=10000
set undoreload=10000
" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif
"no edits in multiple windows, to avoid confusion.
augroup NoSimulataneousEdits
  autocmd!
  autocmd SwapExists * let v:swapchoice= 'o'
  autocmd SwapExists * echomsg ErrorMsg
  autocmd SwapExists * echo 'Duplicate edit session (readonly)'
  autocmd SwapExists * echohl None
augroup END

"#######################
" window resizing
"#######################
function! RESIZEVERT(PlusMinus)
  let num=tabpagewinnr(tabpagenr())
  let pm=a:PlusMinus
  if  num == "2"
    let pm = pm == '+' ? '-' : '+'
  end
  exec "resize " . pm . "1"
endfunction

nnoremap <silent> <DOWN>   :call RESIZEVERT("-")<CR>
nnoremap <silent> <UP> :call RESIZEVERT("+")<CR>
nnoremap <silent> <LEFT> :vertical resize +2<CR>
nnoremap <silent> <RIGHT> :vertical resize -2<CR>

"#######################
" grafix so we can see shit
"#######################

if has("gui_running")
  set guifont=Monaco:h13
  set guifontwide=Hiragino\ Sans\ GB
  set linespace=2
  set background=dark
  colorscheme solarized
endif

"#######################
" PATH var, need ENV for node and composer.
"#######################

let $PATH = '/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/basselkhatib/bin:/Users/basselkhatib/.composer/vendor/bin' .':'. $PATH

" Automatically closing braces
inoremap _{ {<CR>}<Esc>ko
inoremap _[ []<Esc>i
inoremap _( ()<Esc>i
inoremap _< <><Esc>i

"general mappings
nnoremap sss :%s/\s\+$//<CR>
nnoremap rrr :source ~/.vimrc<CR>
nnoremap <c-a> :NERDTreeToggle<CR>
nnoremap <c-q> :q!<CR>
nnoremap <c-s> :w!<CR>
nnoremap <c-z> :PluginInstall<CR>
nnoremap <c-x> :PluginClean!<CR>

"When hitting Enter, if the line doesn't start with a /*, insert a semicolon
"inoremap <CR> <C-R>=((match(getline('.'), '\s*/\*')==-1) && (match(getline('.'), '\s*/int')==-1))?';':''<CR><CR>

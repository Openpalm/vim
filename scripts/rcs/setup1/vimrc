filetype indent plugin on
syntax enable

set nocompatible
set nu
set laststatus=2
set termencoding=utf-8
set nocompatible
set runtimepath=~/.vim/bundle/vim-lsp,$VIMRUNTIME
let mapleader = " " " map leader to Space
set omnifunc=lsp#complete

"#######################
" vundles and their configs
"#######################
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
"#####################
"functional addons
"#####################
Plugin 'scrooloose/nerdtree'
Plugin 'preservim/nerdcommenter' " \cc & \cu - works for visual mode
Plugin '907th/vim-auto-save'

"#####################
" looks
"#####################
Plugin 'morhetz/gruvbox'
Plugin 'altercation/vim-colors-solarized'
Plugin 'kien/rainbow_parentheses.vim'


"#####################
" dev stack plugins
"#####################
Plugin 'dsawardekar/wordpress.vim'
Plugin 'phpactor/phpactor' ,  {'do': 'composer install', 'for': 'php'}
Plugin 'maksimr/vim-jsbeautify'
Plugin 'mattn/emmet-vim'

"#####################
" linters, code analysis, etc.
"#####################
Plugin 'dense-analysis/ale'
Plugin 'SirVer/ultisnips'
Plugin 'rstacruz/vim-ultisnips-css'
Plugin 'vim-syntastic/syntastic'
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
"coc debug
"cd ~/.vim/bundle/coc.nvim/ && git reset head --hard
"open vim && :PluginUpdate
"run call coc#util#install()

call vundle#end()


augroup css
  autocmd!
  autocmd FileType css,html setlocal iskeyword+=-
augroup END

augroup scss
  autocmd!
  autocmd FileType scss setl iskeyword+=@-@
augroup END


"#######################
"languge server lsp stuff
"#######################
let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')

"#######################
"emmet 
"#######################
imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")
let g:user_emmet_mode='inv'    "enable all function in all mode.
let g:user_emmet_expandabbr_key='<Tab>'

let g:user_emmet_install_global = 0
autocmd FileType html,css,php EmmetInstall

augroup EmmetSettings
  autocmd! FileType html imap <tab> <plug>(emmet-expand-abbr)
augroup END

"#######################
"ale
"#######################
"let g:ale_sign_error = '❌'
"let g:ale_sign_warning = '❌'

highlight clear ALEErrorSign
highlight clear ALEWarningSign
let g:ale_set_highlights = 0
highlight ALEWarning ctermbg=DarkMagenta
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

set statusline=%{LinterStatus()}
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

"#######################
"beautify
"#######################
map <c-f> :call JsBeautify()<cr> "ctrl-f
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

"#######################
"autosave
"#######################
let g:auto_save = 1
let g:auto_save_events = ["InsertLeave", "TextChanged"]

"#######################
"syntastic
"#######################
set statusline+=%#warningmsg#
let g:syntastic_enable_signs=1
let g:syntastic_enable_highlighting= 1
let g:syntastic_echo_current_error=1
let g:syntastic_php_checkers = ['phpcs']
let g:syntastic_css_checkers = ['PrettyCSS'] "'csslint' <- really verbose with over the top settings. no idea how to disbale fuck it.
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': 
      \ [
      \ 'html',
      \ 'css',
      \ 'php',
      \ 'python', 
      \ 'javascript'
      \],
      \ 'passive_filetypes': [] }

"#######################
"rainbow brackets
"#######################
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
let g:rbpt_colorpairs = [
      \ ['brown',       'RoyalBlue3'],
      \ ['Darkblue',    'SeaGreen3'],
      \ ['darkgray',    'DarkOrchid3'],
      \ ['darkgreen',   'firebrick3'],
      \ ['darkcyan',    'RoyalBlue3'],
      \ ['darkred',     'SeaGreen3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['brown',       'firebrick3'],
      \ ['gray',        'RoyalBlue3'],
      \ ['black',       'SeaGreen3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['Darkblue',    'firebrick3'],
      \ ['darkgreen',   'RoyalBlue3'],
      \ ['darkcyan',    'SeaGreen3'],
      \ ['darkred',     'DarkOrchid3'],
      \ ['red',         'firebrick3'],
      \ ]

"#######################
" Tab control
"#######################
set expandtab
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=2 " the visible width of tabs
set softtabstop=2 " edit as if the tabs are 4 characters wide
set shiftwidth=2 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
%retab

"#######################
"undo & backup & history
"#######################

set backup                  " enable backups
set noswapfile
set undodir=~/tmp/undo/     " undo files
set backupdir=~/tmp/backup/ " backups
set directory=~/tmp/swap/   " swap files
set history=1000
set undofile "we like the undo file"
set undolevels=10000
set undoreload=10000
" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif
"no edits in multiple windows, to avoid confusion.
augroup NoSimulataneousEdits
  autocmd!
  autocmd SwapExists * let v:swapchoice= 'o'
  autocmd SwapExists * echomsg ErrorMsg
  autocmd SwapExists * echo 'Duplicate edit session (readonly)'
  autocmd SwapExists * echohl None augroup END

"#######################
" window resizing
"#######################
function! RESIZEVERT(PlusMinus)
  let num=tabpagewinnr(tabpagenr())
  let pm=a:PlusMinus
  if  num == "2"
    let pm = pm == '+' ? '-' : '+'
  end
  exec "resize " . pm . "1"
endfunction

nnoremap <silent> <DOWN>   :call RESIZEVERT("-")<CR>
nnoremap <silent> <UP> :call RESIZEVERT("+")<CR>
nnoremap <silent> <LEFT> :vertical resize +2<CR>
nnoremap <silent> <RIGHT> :vertical resize -2<CR>



"When hitting Enter, if the line doesn't start with a /*, insert a semicolon
"autocmd FileType php, css setlocal omnifunc=inoremap <CR> <C-R>=((match(getline('.'), '\s*/\*')==-1) && (match(getline('.'), '\s*/int')==-1))?';':''<CR><CR>

" TextEdit might fail if hidden is not set.
set hidden
set nobackup
set nowritebackup
set cmdheight=2
set updatetime=300
set shortmess+=c
if has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


"autocomplete settings 

"set infercase
"set completeopt=longest,menuone
"set omnifunc=syntaxcomplete#Complete
"set completefunc=syntaxcomplete#Complete
"set complete=.,w,b,u,U,t,i,d
"
"augroup omni_complete
"  " clear commands before resetting
"  autocmd!
"  " Enable omnicomplete for supported filetypes
"  autocmd FileType css,scss setlocal omnifunc=csscomplete#CompleteCSS
"  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"  autocmd FileType php setlocal omnifunc=phpcomplete#Complete
"  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"augroup END



"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 
"candidate for removal 


"#######################
" PATH var, need ENV for node and composer.
"#######################

let $PATH = '/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/basselkhatib/bin:/Users/basselkhatib/.composer/vendor/bin' .':'. $PATH

"#######################
" Automatically closing braces
"#######################
inoremap _{ {<CR>}<Esc>ko
inoremap _[ [<CR>]<Esc>ko
inoremap _( (<CR>)<Esc>ko

inoremap { {}<Esc>i
inoremap [ []<Esc>i
inoremap ( ()<Esc>i

inoremap _< <><Esc>i

"#######################
"general mappings
"#######################
nnoremap sss :%s/\s\+$//<CR>
nnoremap <leader>r :source ~/.vimrc<CR>
nnoremap <leader>v :tab new ~/.vimrc<CR>
nnoremap [ :lnext<CR>
nnoremap ] :lprev<CR>
nnoremap <leader>a :NERDTreeToggle<CR>
nnoremap <leader>q :q!<CR>
nnoremap <leader>w :w!<CR>
nnoremap <leader>z :PluginInstall<CR>
nnoremap <leader>x :PluginClean!<CR>
nnoremap <leader>i gg=G''<CR>
nnoremap <leader>s :g#\({\n\)\@<=#.,/}/sort<CR>

"#######################
" grafix
"#######################

if has("gui_running")
  set guifont=Monaco:h13
  set guifontwide=Hiragino\ Sans\ GB
  set linespace=2
endif
set background=dark
colorscheme gruvbox

"#######################
" Sane defaults
"#######################

set nocompatible
set encoding=utf-8
filetype indent plugin on
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 
set autoindent
set smartindent
set wrapscan
set showmatch
set ruler
set hlsearch "highlight search"
set cmdheight=2
set laststatus=2
colorscheme  goldenrod
syntax on
set nu

%retab

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdtree'
Plugin 'derekwyatt/vim-scala'
" All of your Plugins must be added before the following line
call vundle#end()


"#######################
"that awesome looking trail
"takes care of whitespaces
"#######################
set list
set listchars=""
"set listchars+=eol:e
set listchars+=tab:»·
set listchars+=trail:·
set listchars+=extends:>
"set listchars+=precedes:<
set listchars+=nbsp:·


"#######################
"undo & backupdir
"#######################

let g:auto_save = 1
set backup                        " enable backups
set noswapfile

set undodir=~/tmp/undo/     " undo files
set backupdir=~/tmp/backup/ " backups
set directory=~/tmp/swap/   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif

set history=1000
set undofile "we like the undo file"
set undolevels=1000
set undoreload=1000
" swap dir
augroup NoSimulataneousEdits
  autocmd!
  autocmd SwapExists * let v:swapchoice= 'o'
  autocmd SwapExists * echomsg ErrorMsg
  autocmd SwapExists * echo 'Duplicate edit session (readonly)'
  autocmd SwapExists * echohl None
augroup END







"#######################
" custom aliases, universally shared
" for convenience
"#######################
nnoremap <F1> :call MyCommands()<CR>
nnoremap <F2> :PluginInstall<CR>
nnoremap <F3> :PluginUpdate<CR>
nnoremap <F4> :PluginClean<CR>
nnoremap <F5> :set spelllang=de<CR>
nnoremap <F6> :set spelllang=en<CR>
nnoremap <F7> :set nospell<CR>
nnoremap <F8> :TagbarToggle<CR>
nnoremap <F9> :NERDTreeToggle<CR>
nnoremap sss :%s/\s\+$//<CR>
nnoremap rrr :source ~/.vimrc<CR>
function! MyCommands()


echo '<F1> :call MyCommands()<CR>'
echo '<F2> :PluginInstall<CR>'
echo '<F3> :PluginUpdate<CR>'
echo '<F4> :PluginClean<CR>'
echo '<F5> :set spelllang=de<CR>'
echo '<F6> :set spelllang=en<CR>'
echo '<F7> :set nospell<CR>'
echo '<F8> :TagbarToggle<CR>'
echo '<F9> :NERDTreeToggle<CR>'
echo 'sss :%s/\s\+$//<CR>'
echo 'rrr :source ~/.vimrc<CR>'

endfunction


"#######################
"bracket completion"
"#######################
inoremap _( ()<Esc>:call BC_AddChar(")")<CR>i
inoremap _{ {<CR>}<Esc>:call BC_AddChar("}")<CR><Esc>kA<CR>
inoremap _[ []<Esc>:call BC_AddChar("]")<CR>i
inoremap _" ""<Esc>:call BC_AddChar("\"")<CR>i
inoremap _' ''<Esc>:call BC_AddChar("\'")<CR>i


" jump out of parenthesis, used with the above functions
inoremap <C-j> <Esc>:call search(BC_GetChar(), "W")<CR>a

function! BC_AddChar(schar)
  if exists("b:robstack")
    let b:robstack = b:robstack . a:schar
  else
    let b:robstack = a:schar
  endif
endfunction

function! BC_GetChar()
  let l:char = b:robstack[strlen(b:robstack)-1]
  let b:robstack = strpart(b:robstack, 0, strlen(b:robstack)-1)
  return l:char
endfunction


function! BC_jumpBackChar(num)
  let l:char = b:robstack[strlen(b:robstack)-1]
  let b:robstack = strpart(b:robstack, 0, strlen(b:robstack)-1)
  return l:char
endfunction


"#######################
"custom commands -
"learn vimscript the hardway
" "#######################


"move line down
nnoremap - ddp
"move line up
nnoremap _ ddkkp
"create a recording map that works with qq
"use qq to record, space to use the macro
nnoremap rr @q
"mapping gcc to gcc % -lm
nnoremap ; :

"#adding reccomended syntastic settings
" statusline setup
set laststatus=2
set termencoding=utf-8
set statusline=%t       "tail of the filename
set statusline+=%y      "filetype
set statusline+=[%{FileSize()}]
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file
function! FileSize()
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return ""
    endif
    if bytes < 1024
        return bytes
    else
        return (bytes / 1024) . "K"
    endif
endfunction

autocmd FileType scala setlocal omnifunc=scalacomplete#CompleteTags

"#######################
"EOF
"#######################

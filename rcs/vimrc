"#######################
"init
"#######################
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'vim-scripts/L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" good for html creation
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" emmet for high speed html/css editing.
Plugin 'mattn/emmet-vim'
" base-16 dark color scheme
Plugin 'chriskempson/base16-vim'
" Powerline
Plugin 'powerline/powerline'
" Ultisnips
Plugin 'sirver/ultisnips'
" Tagbar - requires exuberant ctags
Plugin 'majutsushi/tagbar'
"Nerdtree
Plugin 'scrooloose/nerdtree'
"YCM completions c/c++/python
" After installing: cd ~/.vim/bundle/YouCompleteMe && ./install.sh --clang-completer
Plugin 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
call vundle#end()

filetype indent plugin on

"#######################
"default settings: default editor behaviour"
"#######################
"#######################
" if this slows down vim (latex editing) then disable let g:loaded_matchparen = 0
set showmatch

"#######################
" Real tab Indentation
"#######################
set smartindent
set autoindent
set tabstop=4
"set softtabstop=4
"set conceallevel=1
"set shiftwidth=4
%retab
set wrapscan

if exists("*shiftwidth")
  func! s:sw()
    return shiftwidth()!
  endfunc
else
  func! s:sw()
    return &sw
  endfunc
endif

"#######################
"space tabs, instead of real tabs.
"#######################
"set tabstop=4
"set noexpandtab
"set expandtab
"set tabstop=2




"#######################
"ruler and measurements
"#######################
set ruler "Always show current position"
set nu "enables line numbers "
set foldmethod=indent
"set foldnestmax=10
set nofoldenable
set foldlevel=1

set hlsearch "highlight search"
" Set this to a group from :help highlight-default
let s:hl_group = 'ErrorMsg'

function! s:HlNext()
  call s:HlClear()
  let param = getreg('/')
  let s:next_match = matchadd(s:hl_group, '\%#'.param)
  redraw
endfunction

function! s:HlMatch()
  let cmd_type = getcmdtype()
  if cmd_type == '/' || cmd_type == '?'
    return "\<cr>:call ".s:SID()."HlNext()\<cr>"
  endif
  return "\<cr>"
endfunction

function! s:HlClear()
  silent! call matchdelete(s:next_match)
endfunction

function! s:SID()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID$')
endfun

nnoremap <silent> n n:call <sid>HlNext()<enter>
nnoremap <silent> N N:call <sid>HlNext()<enter>
cnoremap <silent> <expr> <enter> <sid>HlMatch()


highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%81v', 100)




"#######################
"offer completion with a menu"
"#######################
"set completeopt=menu,menuone,longest,preview
"let g:neocomplcache_enable_at_startup = 1

set wildmenu
set wildmode=list:longest



"#######################
"default encoding"
"#######################
set encoding=utf-8




"#######################
"that awesome looking trail
"takes care of whitespaces
"#######################
set list
set listchars=""
"set listchars+=eol:e
set listchars+=tab:»·
set listchars+=trail:·
set listchars+=extends:>
"set listchars+=precedes:<
set listchars+=nbsp:·


"#######################
"undo & backupdir
"#######################

set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/tmp/undo/     " undo files
set backupdir=~/tmp/backup/ " backups
set directory=~/tmp/swap/   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

set history=1000
set undofile "we like the undo file"
set undolevels=1000
set undoreload=1000
" swap dir
augroup NoSimulataneousEdits
  autocmd!
  autocmd SwapExists * let v:swapchoice= 'o'
  autocmd SwapExists * echomsg ErrorMsg
  autocmd SwapExists * echo 'Duplicate edit session (readonly)'
  autocmd SwapExists * echohl None
augroup END



"#######################
" colorization
"#######################
syntax enable
set ofu=syntaxcomplete#Complete
syntax on

set background=dark
if has('gui_running')
  set guioptions-=T  " no toolbar
	colorscheme base16-default
  hi Todo guifg=#40ffff guibg=#606060
  set lines=50 columns=96 linespace=0
else
	colorscheme base16-default
  set lines=50 columns=96 linespace=0
endif
" required to enable the status line"
set cmdheight=2
set laststatus=2





"#######################
" custom aliases, universally shared
" for convenience
"#######################
nnoremap <F1> :MyFunctions<CR>
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
nnoremap <F8> :TagbarToggle<CR>
nnoremap <F9> :NERDTreeToggle<CR>
nnoremap <F11> :cd %:p:g<CR>
nnoremap ; :
nnoremap sss :%s/\s\+$//<CR>
nnoremap rerc :source $MYVIMRC<CR>
nnoremap <F1> :call MyCommands()<CR>
vnoremap <expr>  ++  VMATH_YankAndAnalyse()
nnoremap         ++  vip++
function! MyCommands()
  echo 'F1 -> prints this'
  echo 'F8 -> Tagbar'
  echo 'F9 -> NERDTree'
  echo 'sss -> removes whitespaces from EOL'
  echo 'rerc -> sources vimrc'
  echo '++ -> vmath list of numbers'
endfunction

"##############c########
"vim-latex"
"#######################
let g:Imap_UsePlaceHolders = 0
set backspace +=start




"#######################
"bracket completion"
"#######################
inoremap _( ()<Esc>:call BC_AddChar(")")<CR>i
inoremap _{ {<CR>}<Esc>:call BC_AddChar("}")<CR><Esc>kA<CR>
inoremap _[ []<Esc>:call BC_AddChar("]")<CR>i
inoremap _" ""<Esc>:call BC_AddChar("\"")<CR>i
inoremap _' ''<Esc>:call BC_AddChar("\'")<CR>i
inoremap _# ### ###<Esc>:call BC_AddChar("###")<CR>i
" eay title brackets while writing in a text file
inoremap _C /* */<Esc>:call BC_AddChar("")<CR>i
"C Style Comments"
inoremap _J /** **/<Esc>:call BC_AddChar("")<CR>i
"Java Style Comments"
inoremap _P """ """<Esc>:call BC_AddChar('')<CR>i
"Python Style Comments"
inoremap _H <-- --><Esc>:call BC_AddChar("")<CR>i
"HTML Style Comments"

" jump out of parenthesis, used with the above functions
inoremap <C-j> <Esc>:call search(BC_GetChar(), "W")<CR>a

function! BC_AddChar(schar)
  if exists("b:robstack")
    let b:robstack = b:robstack . a:schar
  else
    let b:robstack = a:schar
  endif
endfunction

function! BC_GetChar()
  let l:char = b:robstack[strlen(b:robstack)-1]
  let b:robstack = strpart(b:robstack, 0, strlen(b:robstack)-1)
  return l:char
endfunction


function! BC_jumpBackChar(num)
  let l:char = b:robstack[strlen(b:robstack)-1]
  let b:robstack = strpart(b:robstack, 0, strlen(b:robstack)-1)
  return l:char
endfunction




"#######################
" goto file. include all
" project files.
"#######################
"set path+=./**

if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif


"#######################
"custom commands -
"learn vimscript the hardway
" "#######################


"move line down
nnoremap - ddp
"move line up
nnoremap _ ddkkp
"create a recording map that works with qq
"use qq to record, space to use the macro
nnoremap <SPACE> @q
"mapping gcc to gcc % -lm
nnoremap <F4> :!gcc -std=c99 -Wall -Wextra -Wmissing-braces -Wstrict-prototypes -Wformat -Wpedantic % -lm
nnoremap <F3> :! ./a.out <bar> less
"making it quicker to source vimrc
nnoremap <F2> :source ~/.vimrc



"### YCM defs  ###
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"

"### Completion, hope it works ###
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]



" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-q>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:UltiSnips = {}
"let g:UltiSnips.always_use_first_snippet = 1
let g:UltiSnips.snipmate_ft_filter = {
     \ 'default' : {'filetypes': ["FILETYPE", "_"] },
     \ 'html'    : {'filetypes': ["html", "javascript", "_"] },
     \ 'cpp'    : {'filetypes': [] },
     \ }

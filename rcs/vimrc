"#######################
"init
"#######################
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'vim-scripts/L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" good for html creation
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" emmet for high speed html/css editing.
Plugin 'mattn/emmet-vim'
" Powerline
Plugin 'powerline/powerline'
" Ultisnips
Plugin 'sirver/ultisnips'
" Tagbar - requires exuberant ctags
Plugin 'majutsushi/tagbar'
"Nerdtree
Plugin 'scrooloose/nerdtree'
"YCM completions c/c++/python
" After installing: run ~/.vim/scripts/ycm_fix.sh
"Plugin 'Valloric/YouCompleteMe'
" After installing: run ~/.vim/scripts/ycm_fix.sh
"
" syntax checking
Plugin 'scrooloose/syntastic'

" auto completion 
Plugin 'Shougo/neocomplete'

"instant markdown
Plugin 'suan/vim-instant-markdown'

"color themes
Plugin 'sickill/vim-monokai'

" D syntax highlighting
Plugin 'JesseKPhillips/d.vim'


" All of your Plugins must be added before the following line
call vundle#end()


filetype indent plugin on

"#######################
"default settings: default editor behaviour"
"#######################
"#######################
" if this slows down vim (latex editing) then disable let g:loaded_matchparen = 0
set showmatch


"#######################
" Real tab Indentation
"#######################
set smartindent
set autoindent
set tabstop=2
set expandtab
"set softtabstop=4
"set conceallevel=1
set shiftwidth=2
%retab
set wrapscan

if exists("*shiftwidth")
  func! s:sw()
    return shiftwidth()!
  endfunc
else
  func! s:sw()
    return &sw
  endfunc
endif

"#######################
"space tabs, instead of real tabs.
"#######################
"set tabstop=4
"set noexpandtab
"set expandtab
"set tabstop=2




"#######################
"ruler and measurements
"#######################
set ruler "Always show current position"
set nu "enables line numbers "
set foldmethod=indent
"set foldnestmax=10
set nofoldenable
set foldlevel=1

set hlsearch "highlight search"
" Set this to a group from :help highlight-default
let s:hl_group = 'ErrorMsg'

function! s:HlNext()
  call s:HlClear()
  let param = getreg('/')
  let s:next_match = matchadd(s:hl_group, '\%#'.param)
  redraw
endfunction

function! s:HlMatch()
  let cmd_type = getcmdtype()
  if cmd_type == '/' || cmd_type == '?'
    return "\<cr>:call ".s:SID()."HlNext()\<cr>"
  endif
  return "\<cr>"
endfunction

function! s:HlClear()
  silent! call matchdelete(s:next_match)
endfunction

function! s:SID()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID$')
endfun

nnoremap <silent> n n:call <sid>HlNext()<enter>
nnoremap <silent> N N:call <sid>HlNext()<enter>
cnoremap <silent> <expr> <enter> <sid>HlMatch()


highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%81v', 100)




"#######################
"offer completion with a menu"
"#######################
"set completeopt=menu,menuone,longest,preview
"let g:neocomplcache_enable_at_startup = 1

set wildmenu
set wildmode=list:longest



"#######################
"default encoding"
"#######################
set encoding=utf-8




"#######################
"that awesome looking trail
"takes care of whitespaces
"#######################
set list
set listchars=""
"set listchars+=eol:e
set listchars+=tab:»·
set listchars+=trail:·
set listchars+=extends:>
"set listchars+=precedes:<
set listchars+=nbsp:·


"#######################
"undo & backupdir
"#######################

set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/tmp/undo/     " undo files
set backupdir=~/tmp/backup/ " backups
set directory=~/tmp/swap/   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif

set history=1000
set undofile "we like the undo file"
set undolevels=1000
set undoreload=1000
" swap dir
augroup NoSimulataneousEdits
  autocmd!
  autocmd SwapExists * let v:swapchoice= 'o'
  autocmd SwapExists * echomsg ErrorMsg
  autocmd SwapExists * echo 'Duplicate edit session (readonly)'
  autocmd SwapExists * echohl None
augroup END



"#######################
" colorization
"#######################
syntax enable
"set ofu=syntaxcomplete#Complete
syntax on

"set background=dark
if has('gui_running')
  set guioptions-=T  " no toolbar
  set background=dark
  colorscheme monokai
  set guifont=Ubuntu\ Mono\ 13
  hi Todo guifg=#40ffff guibg=#606060
  set lines=50 columns=96 linespace=0
else
  set background=dark
  colorscheme monokai
  "  set lines=50 columns=96 linespace=0
endif
" required to enable the status line"
set cmdheight=2
set laststatus=2





"#######################
" custom aliases, universally shared
" for convenience
"#######################
nnoremap <F1> :MyFunctions<CR>
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
nnoremap <F6> :set spelllang=en<CR>
nnoremap <F7> :set nospell<CR>
nnoremap <F8> :TagbarToggle<CR>
nnoremap <F9> :NERDTreeToggle<CR>
nnoremap <F11> :cd %:p:g<CR>
nnoremap sss :%s/\s\+$//<CR>
nnoremap rrr :source ~/.vimrc<CR>
nnoremap <F1> :call MyCommands()<CR>
function! MyCommands()
  echo 'F1 -> prints this'
  echo 'F3 -> !./a.out | less'
  echo 'F4 -> !make - make sure a make file is present'
  echo 'F5 -> force YCM rescan'
  echo 'F6 -> set spellang=en - use z= to view correction list'
  echo 'F7 -> set nospell'
  echo 'F8 -> Tagbar'
  echo 'F9 -> NERDTree'
  echo 'F10 -> free to remap'
  echo 'sss -> removes whitespaces from EOL'
  echo 'rrr -> sources vimrc'
endfunction


"##############c########
"vim-latex"
"#######################
let g:Imap_UsePlaceHolders = 0
set backspace +=start




"#######################
"bracket completion"
"#######################
inoremap _( ()<Esc>:call BC_AddChar(")")<CR>i
inoremap _{ {<CR>}<Esc>:call BC_AddChar("}")<CR><Esc>kA<CR>
inoremap _[ []<Esc>:call BC_AddChar("]")<CR>i
inoremap _" ""<Esc>:call BC_AddChar("\"")<CR>i
inoremap _' ''<Esc>:call BC_AddChar("\'")<CR>i


" jump out of parenthesis, used with the above functions
inoremap <C-j> <Esc>:call search(BC_GetChar(), "W")<CR>a

function! BC_AddChar(schar)
  if exists("b:robstack")
    let b:robstack = b:robstack . a:schar
  else
    let b:robstack = a:schar
  endif
endfunction

function! BC_GetChar()
  let l:char = b:robstack[strlen(b:robstack)-1]
  let b:robstack = strpart(b:robstack, 0, strlen(b:robstack)-1)
  return l:char
endfunction


function! BC_jumpBackChar(num)
  let l:char = b:robstack[strlen(b:robstack)-1]
  let b:robstack = strpart(b:robstack, 0, strlen(b:robstack)-1)
  return l:char
endfunction


"#######################
" goto file. include all
" project files.
"#######################
"set path+=./**

if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif


"#######################
"custom commands -
"learn vimscript the hardway
" "#######################


"move line down
nnoremap - ddp
"move line up
nnoremap _ ddkkp
"create a recording map that works with qq
"use qq to record, space to use the macro
nnoremap <SPACE> @q
"mapping gcc to gcc % -lm
nnoremap <F4> :!make
" be careful when using vim's console to check output. the console is
" incomplete.
nnoremap <F3> :! ./a.out <bar> less
"making it quicker to source vimrc
nnoremap <F2> :source ~/.vimrc



"### YCM defs  ###
let g:ycm_global_ycm_extra_conf = "~/.vim/conf/ycm/ycm_extra_conf.py"

"### Completion, hope it works ###
"let g:ycm_key_list_select_completion=[]
"let g:ycm_key_list_previous_completion=[]


" Trigger configuration. Do not use <tab> if using ycm.
let g:UltiSnipsExpandTrigger="<c-q>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnips = {}
"let g:UltiSnips.always_use_first_snippet = 1
let g:UltiSnips.snipmate_ft_filter = {
      \ 'default' : {'filetypes': ["FILETYPE", "_"] },
      \ 'html'    : {'filetypes': ["html", "javascript", "_"] },
      \ 'cpp'    : {'filetypes': [] },
      \ }

"#adding reccomended syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"# adding neocomplete's recommended settings
"
"
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
"#######################
"EOF
"#######################

